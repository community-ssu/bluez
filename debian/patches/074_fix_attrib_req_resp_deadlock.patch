author	Ido Yariv <ido@wizery.com>
commit	a49ba8abd97f68062291b53f5073138a69e8e852
	Wed, 30 May 2012 07:39:52 +0000 (10:39 +0300)

gattrib: Fix a request/response command deadlock

New requests and responses are never sent if a request was sent and the
response for it hasn't been received yet. As a result, if both end
points send requests at the same time, a deadlock could occur. This
could happen, for instance, if the client sends a read request and the
server sends an indication before responding to the read request.

Fix this by introducing an additional queue for responses. Responses may
be sent while there's still a pending request/indication.

diff -cr bluez-4.99.pan.orig/attrib/gattrib.c bluez-4.99.pan/attrib/gattrib.c
*** bluez-4.99.pan.orig/attrib/gattrib.c	Mon Mar  5 04:03:57 2012
--- bluez-4.99.pan/attrib/gattrib.c	Mon Oct 15 09:26:58 2012
***************
*** 46,52 ****
  	guint read_watch;
  	guint write_watch;
  	guint timeout_watch;
! 	GQueue *queue;
  	GSList *events;
  	guint next_cmd_id;
  	guint next_evt_id;
--- 46,53 ----
  	guint read_watch;
  	guint write_watch;
  	guint timeout_watch;
! 	GQueue *requests;
! 	GQueue *responses;
  	GSList *events;
  	guint next_cmd_id;
  	guint next_evt_id;
***************
*** 173,183 ****
  	GSList *l;
  	struct command *c;
  
! 	while ((c = g_queue_pop_head(attrib->queue)))
  		command_destroy(c);
  
! 	g_queue_free(attrib->queue);
! 	attrib->queue = NULL;
  
  	for (l = attrib->events; l; l = l->next)
  		event_destroy(l->data);
--- 174,190 ----
  	GSList *l;
  	struct command *c;
  
! 	while ((c = g_queue_pop_head(attrib->requests)))
! 		command_destroy(c);
! 
! 	while ((c = g_queue_pop_head(attrib->responses)))
  		command_destroy(c);
  
! 	g_queue_free(attrib->requests);
! 	attrib->requests = NULL;
! 
! 	g_queue_free(attrib->responses);
! 	attrib->responses = NULL;
  
  	for (l = attrib->events; l; l = l->next)
  		event_destroy(l->data);
***************
*** 259,279 ****
  	GError *gerr = NULL;
  	gsize len;
  	GIOStatus iostat;
  
  	if (cond & (G_IO_HUP | G_IO_ERR | G_IO_NVAL))
  		return FALSE;
  
! 	cmd = g_queue_peek_head(attrib->queue);
  	if (cmd == NULL)
  		return FALSE;
  
  	iostat = g_io_channel_write_chars(io, (gchar *) cmd->pdu, cmd->len,
  								&len, &gerr);
  	if (iostat != G_IO_STATUS_NORMAL)
  		return FALSE;
  
  	if (cmd->expected == 0) {
! 		g_queue_pop_head(attrib->queue);
  		command_destroy(cmd);
  
  		return TRUE;
--- 266,299 ----
  	GError *gerr = NULL;
  	gsize len;
  	GIOStatus iostat;
+ 	GQueue *queue;
  
  	if (cond & (G_IO_HUP | G_IO_ERR | G_IO_NVAL))
  		return FALSE;
  
! 	queue = attrib->responses;
! 	cmd = g_queue_peek_head(queue);
! 	if (cmd == NULL) {
! 		queue = attrib->requests;
! 		cmd = g_queue_peek_head(queue);
! 	}
  	if (cmd == NULL)
  		return FALSE;
  
+ 	/*
+ 	 * Verify that we didn't already send this command. This can only
+ 	 * happen with elementes from attrib->requests.
+ 	 */
+ 	if (cmd->sent)
+ 		return FALSE;
+ 
  	iostat = g_io_channel_write_chars(io, (gchar *) cmd->pdu, cmd->len,
  								&len, &gerr);
  	if (iostat != G_IO_STATUS_NORMAL)
  		return FALSE;
  
  	if (cmd->expected == 0) {
! 		g_queue_pop_head(queue);
  		command_destroy(cmd);
  
  		return TRUE;
***************
*** 311,317 ****
  	uint8_t buf[512], status;
  	gsize len;
  	GIOStatus iostat;
! 	gboolean qempty;
  
  	if (attrib->timeout_watch > 0) {
  		g_source_remove(attrib->timeout_watch);
--- 331,337 ----
  	uint8_t buf[512], status;
  	gsize len;
  	GIOStatus iostat;
! 	gboolean norequests, noresponses;
  
  	if (attrib->timeout_watch > 0) {
  		g_source_remove(attrib->timeout_watch);
***************
*** 345,351 ****
  	if (is_response(buf[0]) == FALSE)
  		return TRUE;
  
! 	cmd = g_queue_pop_head(attrib->queue);
  	if (cmd == NULL) {
  		/* Keep the watch if we have events to report */
  		return attrib->events != NULL;
--- 365,371 ----
  	if (is_response(buf[0]) == FALSE)
  		return TRUE;
  
! 	cmd = g_queue_pop_head(attrib->requests);
  	if (cmd == NULL) {
  		/* Keep the watch if we have events to report */
  		return attrib->events != NULL;
***************
*** 364,370 ****
  	status = 0;
  
  done:
! 	qempty = attrib->queue == NULL || g_queue_is_empty(attrib->queue);
  
  	if (cmd) {
  		if (cmd->func)
--- 384,393 ----
  	status = 0;
  
  done:
! 	norequests = attrib->requests == NULL ||
! 			g_queue_is_empty(attrib->requests);
! 	noresponses = attrib->responses == NULL ||
! 			g_queue_is_empty(attrib->responses);
  
  	if (cmd) {
  		if (cmd->func)
***************
*** 373,379 ****
  		command_destroy(cmd);
  	}
  
! 	if (!qempty)
  		wake_up_sender(attrib);
  
  	return TRUE;
--- 396,402 ----
  		command_destroy(cmd);
  	}
  
! 	if (!norequests || !noresponses)
  		wake_up_sender(attrib);
  
  	return TRUE;
***************
*** 392,398 ****
  		return NULL;
  
  	attrib->io = g_io_channel_ref(io);
! 	attrib->queue = g_queue_new();
  
  	attrib->read_watch = g_io_add_watch(attrib->io,
  			G_IO_IN | G_IO_HUP | G_IO_ERR | G_IO_NVAL,
--- 415,422 ----
  		return NULL;
  
  	attrib->io = g_io_channel_ref(io);
! 	attrib->requests = g_queue_new();
! 	attrib->responses = g_queue_new();
  
  	attrib->read_watch = g_io_add_watch(attrib->io,
  			G_IO_IN | G_IO_HUP | G_IO_ERR | G_IO_NVAL,
***************
*** 417,422 ****
--- 441,447 ----
  			gpointer user_data, GDestroyNotify notify)
  {
  	struct command *c;
+ 	GQueue *queue;
  
  	c = g_try_new0(struct command, 1);
  	if (c == NULL)
***************
*** 431,445 ****
  	c->user_data = user_data;
  	c->notify = notify;
  
  	if (id) {
  		c->id = id;
! 		g_queue_push_head(attrib->queue, c);
  	} else {
  		c->id = ++attrib->next_cmd_id;
! 		g_queue_push_tail(attrib->queue, c);
  	}
  
! 	if (g_queue_get_length(attrib->queue) == 1)
  		wake_up_sender(attrib);
  
  	return c->id;
--- 456,484 ----
  	c->user_data = user_data;
  	c->notify = notify;
  
+ 	if (is_response(opcode))
+ 		queue = attrib->responses;
+ 	else
+ 		queue = attrib->requests;
+ 
  	if (id) {
  		c->id = id;
! 		if (!is_response(opcode))
! 			g_queue_push_head(queue, c);
! 		else
! 			/* Don't re-order responses even if an ID is given */
! 			g_queue_push_tail(queue, c);
  	} else {
  		c->id = ++attrib->next_cmd_id;
! 		g_queue_push_tail(queue, c);
  	}
  
! 	/*
! 	 * If a command was added to the queue and it was empty before, wake up
! 	 * the sender. If the sender was already woken up by the second queue,
! 	 * wake_up_sender will just return.
! 	 */
! 	if (g_queue_get_length(queue) == 1)
  		wake_up_sender(attrib);
  
  	return c->id;
***************
*** 455,492 ****
  
  gboolean g_attrib_cancel(GAttrib *attrib, guint id)
  {
! 	GList *l;
  	struct command *cmd;
  
! 	if (attrib == NULL || attrib->queue == NULL)
  		return FALSE;
  
! 	l = g_queue_find_custom(attrib->queue, GUINT_TO_POINTER(id),
! 							command_cmp_by_id);
  	if (l == NULL)
  		return FALSE;
  
  	cmd = l->data;
  
! 	if (cmd == g_queue_peek_head(attrib->queue) && cmd->sent)
  		cmd->func = NULL;
  	else {
! 		g_queue_remove(attrib->queue, cmd);
  		command_destroy(cmd);
  	}
  
  	return TRUE;
  }
  
! gboolean g_attrib_cancel_all(GAttrib *attrib)
  {
  	struct command *c, *head = NULL;
  	gboolean first = TRUE;
  
! 	if (attrib == NULL || attrib->queue == NULL)
  		return FALSE;
  
! 	while ((c = g_queue_pop_head(attrib->queue))) {
  		if (first && c->sent) {
  			/* If the command was sent ignore its callback ... */
  			c->func = NULL;
--- 494,542 ----
  
  gboolean g_attrib_cancel(GAttrib *attrib, guint id)
  {
! 	GList *l = NULL;
  	struct command *cmd;
+ 	GQueue *queue;
  
! 	if (attrib == NULL)
  		return FALSE;
  
! 	queue = attrib->requests;
! 	if (queue)
! 		l = g_queue_find_custom(queue, GUINT_TO_POINTER(id),
! 					command_cmp_by_id);
! 	if (l == NULL) {
! 		queue = attrib->responses;
! 		if (!queue)
! 			return FALSE;
! 		l = g_queue_find_custom(queue, GUINT_TO_POINTER(id),
! 					command_cmp_by_id);
! 	}
! 
  	if (l == NULL)
  		return FALSE;
  
  	cmd = l->data;
  
! 	if (cmd == g_queue_peek_head(queue) && cmd->sent)
  		cmd->func = NULL;
  	else {
! 		g_queue_remove(queue, cmd);
  		command_destroy(cmd);
  	}
  
  	return TRUE;
  }
  
! gboolean cancel_all_per_queue(GQueue *queue)
  {
  	struct command *c, *head = NULL;
  	gboolean first = TRUE;
  
! 	if (queue == NULL)
  		return FALSE;
  
! 	while ((c = g_queue_pop_head(queue))) {
  		if (first && c->sent) {
  			/* If the command was sent ignore its callback ... */
  			c->func = NULL;
***************
*** 500,511 ****
  
  	if (head) {
  		/* ... and put it back in the queue */
! 		g_queue_push_head(attrib->queue, head);
  	}
  
  	return TRUE;
  }
  
  gboolean g_attrib_set_debug(GAttrib *attrib,
  		GAttribDebugFunc func, gpointer user_data)
  {
--- 550,574 ----
  
  	if (head) {
  		/* ... and put it back in the queue */
! 		g_queue_push_head(queue, head);
  	}
  
  	return TRUE;
  }
  
+ gboolean g_attrib_cancel_all(GAttrib *attrib)
+ {
+ 	gboolean ret;
+ 
+ 	if (attrib == NULL)
+ 		return FALSE;
+ 
+ 	ret = cancel_all_per_queue(attrib->requests);
+ 	ret = cancel_all_per_queue(attrib->responses) && ret;
+ 
+ 	return ret;
+ }
+ 
  gboolean g_attrib_set_debug(GAttrib *attrib,
  		GAttribDebugFunc func, gpointer user_data)
  {
