From: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date: Fri, 19 Oct 2012 12:59:23 +0300

Subject: [PATCH BlueZ v2] AVDTP: Do not keep a internal reference

Don't initialize reference with 1, instead always start disconnect timer
when reference drops to 0, so in case nobody reclaims the session it
automatically disconnect after 1 second and frees the memory.
---
v2: Fix with stream_setup flag being ignored in disconnect_timeout

diff -cr bluez-4.99.pan.orig/audio/avdtp.c bluez-4.99.pan/audio/avdtp.c
*** bluez-4.99.pan.orig/audio/avdtp.c	Thu Oct 18 09:45:10 2012
--- bluez-4.99.pan/audio/avdtp.c	Fri Oct 19 10:55:17 2012
***************
*** 386,393 ****
  /* Structure describing an AVDTP connection between two devices */
  
  struct avdtp {
! 	int ref;
! 	int free_lock;
  
  	uint16_t version;
  
--- 386,392 ----
  /* Structure describing an AVDTP connection between two devices */
  
  struct avdtp {
! 	unsigned int ref;
  
  	uint16_t version;
  
***************
*** 654,703 ****
  	return FALSE;
  }
  
- static gboolean disconnect_timeout(gpointer user_data)
- {
- 	struct avdtp *session = user_data;
- 	struct audio_device *dev;
- 	gboolean stream_setup;
- 
- 	session->dc_timer = 0;
- 	stream_setup = session->stream_setup;
- 	session->stream_setup = FALSE;
- 
- 	dev = manager_get_device(&session->server->src, &session->dst, FALSE);
- 
- 	if (dev && dev->sink && stream_setup)
- 		sink_setup_stream(dev->sink, session);
- 	else if (dev && dev->source && stream_setup)
- 		source_setup_stream(dev->source, session);
- 	else
- 		connection_lost(session, ETIMEDOUT);
- 
- 	return FALSE;
- }
- 
- static void remove_disconnect_timer(struct avdtp *session)
- {
- 	g_source_remove(session->dc_timer);
- 	session->dc_timer = 0;
- 	session->stream_setup = FALSE;
- }
- 
- static void set_disconnect_timer(struct avdtp *session)
- {
- 	if (session->dc_timer)
- 		remove_disconnect_timer(session);
- 
- 	if (session->device_disconnect) {
- 		session->dc_timer = g_idle_add(disconnect_timeout, session);
- 		return;
- 	}
- 
- 	session->dc_timer = g_timeout_add_seconds(DISCONNECT_TIMEOUT,
- 						disconnect_timeout,
- 						session);
- }
- 
  void avdtp_error_init(struct avdtp_error *err, uint8_t category, int id)
  {
  	err->category = category;
--- 653,658 ----
***************
*** 777,784 ****
  	}
  }
  
! static void stream_free(struct avdtp_stream *stream)
  {
  	struct avdtp_remote_sep *rsep;
  
  	stream->lsep->info.inuse = 0;
--- 732,740 ----
  	}
  }
  
! static void stream_free(void *data)
  {
+ 	struct avdtp_stream *stream = data;
  	struct avdtp_remote_sep *rsep;
  
  	stream->lsep->info.inuse = 0;
***************
*** 1130,1135 ****
--- 1086,1092 ----
  static int avdtp_cancel_authorization(struct avdtp *session)
  {
  	struct audio_device *dev;
+ 	int err;
  
  	if (session->state != AVDTP_SESSION_STATE_CONNECTING)
  		return 0;
***************
*** 1138,1173 ****
  	if (dev == NULL)
  		return -ENODEV;
  
! 	return audio_device_cancel_authorization(dev, auth_cb, session);
  }
  
! static void connection_lost(struct avdtp *session, int err)
  {
! 	char address[18];
  
! 	ba2str(&session->dst, address);
! 	DBG("Disconnected from %s", address);
  
! 	if (err != EACCES)
! 		avdtp_cancel_authorization(session);
  
! 	session->free_lock = 1;
  
! 	finalize_discovery(session, err);
  
! 	g_slist_foreach(session->streams, (GFunc) release_stream, session);
! 	session->streams = NULL;
  
! 	session->free_lock = 0;
  
  	if (session->io) {
  		g_io_channel_shutdown(session->io, FALSE, NULL);
  		g_io_channel_unref(session->io);
- 		session->io = NULL;
  	}
  
- 	avdtp_set_state(session, AVDTP_SESSION_STATE_DISCONNECTED);
- 
  	if (session->io_id) {
  		g_source_remove(session->io_id);
  		session->io_id = 0;
--- 1095,1140 ----
  	if (dev == NULL)
  		return -ENODEV;
  
! 	err = audio_device_cancel_authorization(dev, auth_cb, session);
! 	if (err < 0)
! 		return err;
! 
! 	avdtp_unref(session);
! 
! 	return 0;
  }
  
! static void sep_free(gpointer data)
  {
! 	struct avdtp_remote_sep *sep = data;
  
! 	g_slist_free_full(sep->caps, g_free);
! 	g_free(sep);
! }
  
! static void remove_disconnect_timer(struct avdtp *session)
! {
! 	g_source_remove(session->dc_timer);
! 	session->dc_timer = 0;
! 	session->stream_setup = FALSE;
! }
  
! static void avdtp_free(void *data)
! {
! 	struct avdtp *session = data;
  
! 	DBG("%p", session);
  
! 	g_slist_free_full(session->streams, stream_free);
  
! 	if (session->state != AVDTP_SESSION_STATE_DISCONNECTED)
! 		avdtp_set_state(session, AVDTP_SESSION_STATE_DISCONNECTED);
  
  	if (session->io) {
  		g_io_channel_shutdown(session->io, FALSE, NULL);
  		g_io_channel_unref(session->io);
  	}
  
  	if (session->io_id) {
  		g_source_remove(session->io_id);
  		session->io_id = 0;
***************
*** 1176,1244 ****
  	if (session->dc_timer)
  		remove_disconnect_timer(session);
  
! 	if (session->ref != 1)
! 		error("connection_lost: ref count not 1 after all callbacks");
! 	else
! 		avdtp_unref(session);
  }
  
! static void sep_free(gpointer data)
  {
! 	struct avdtp_remote_sep *sep = data;
  
! 	g_slist_free_full(sep->caps, g_free);
! 	g_free(sep);
  }
  
! void avdtp_unref(struct avdtp *session)
  {
! 	struct avdtp_server *server;
  
! 	if (!session)
  		return;
  
! 	session->ref--;
! 
! 	DBG("%p: ref=%d", session, session->ref);
  
! 	if (session->ref == 1) {
! 		if (session->state == AVDTP_SESSION_STATE_CONNECTING &&
! 								session->io) {
! 			avdtp_cancel_authorization(session);
! 			g_io_channel_shutdown(session->io, TRUE, NULL);
! 			g_io_channel_unref(session->io);
! 			session->io = NULL;
! 			avdtp_set_state(session,
! 					AVDTP_SESSION_STATE_DISCONNECTED);
! 		}
  
! 		if (session->io)
! 			set_disconnect_timer(session);
! 		else if (!session->free_lock) /* Drop the local ref if we
! 						 aren't connected */
! 			session->ref--;
! 	}
  
! 	if (session->ref > 0)
! 		return;
  
! 	server = session->server;
  
! 	DBG("%p: freeing session and removing from list", session);
  
! 	if (session->dc_timer)
! 		remove_disconnect_timer(session);
  
! 	server->sessions = g_slist_remove(server->sessions, session);
  
! 	if (session->req)
! 		pending_req_free(session->req);
  
! 	g_slist_free_full(session->seps, sep_free);
  
! 	g_free(session->buf);
  
! 	g_free(session);
  }
  
  struct avdtp *avdtp_ref(struct avdtp *session)
--- 1143,1234 ----
  	if (session->dc_timer)
  		remove_disconnect_timer(session);
  
! 	avdtp_cancel_authorization(session);
! 
! 	if (session->req)
! 		pending_req_free(session->req);
! 
! 	g_slist_free_full(session->seps, sep_free);
! 
! 	g_free(session->buf);
! 
! 	g_free(session);
  }
  
! static gboolean disconnect_timeout(gpointer user_data)
  {
! 	struct avdtp *session = user_data;
! 	struct audio_device *dev;
! 	gboolean stream_setup;
  
! 	session->dc_timer = 0;
! 
! 	stream_setup = session->stream_setup;
! 	session->stream_setup = FALSE;
! 	dev = manager_get_device(&session->server->src, &session->dst, FALSE);
! 
! 	if (dev && dev->sink && stream_setup)
! 		sink_setup_stream(dev->sink, session);
! 	else if (dev && dev->source && stream_setup)
! 		source_setup_stream(dev->source, session);
! 	else if (session->ref > 0)
! 		connection_lost(session, ETIMEDOUT);
! 	else {
! 		struct avdtp_server *server = session->server;
! 
! 		server->sessions = g_slist_remove(server->sessions, session);
! 		avdtp_free(session);
! 	}
! 
! 	return FALSE;
  }
  
! static void set_disconnect_timer(struct avdtp *session)
  {
! 	if (session->dc_timer)
! 		remove_disconnect_timer(session);
  
! 	if (session->device_disconnect) {
! 		session->dc_timer = g_idle_add(disconnect_timeout, session);
  		return;
+ 	}
  
! 	session->dc_timer = g_timeout_add_seconds(DISCONNECT_TIMEOUT,
! 						disconnect_timeout,
! 						session);
! }
  
! static void connection_lost(struct avdtp *session, int err)
! {
! 	char address[18];
  
! 	ba2str(&session->dst, address);
! 	DBG("Disconnected from %s", address);
  
! 	if (err != EACCES)
! 		avdtp_cancel_authorization(session);
  
! 	g_slist_foreach(session->streams, (GFunc) release_stream, session);
! 	session->streams = NULL;
  
! 	finalize_discovery(session, err);
  
! 	avdtp_set_state(session, AVDTP_SESSION_STATE_DISCONNECTED);
! }
  
! void avdtp_unref(struct avdtp *session)
! {
! 	if (!session)
! 		return;
  
! 	session->ref--;
  
! 	DBG("%p: ref=%d", session, session->ref);
  
! 	if (session->ref > 0)
! 		return;
  
! 	set_disconnect_timer(session);
  }
  
  struct avdtp *avdtp_ref(struct avdtp *session)
***************
*** 2224,2235 ****
  			goto failed;
  		}
  
- 		if (session->ref == 1 && !session->streams && !session->req)
- 			set_disconnect_timer(session);
- 
- 		if (session->streams && session->dc_timer)
- 			remove_disconnect_timer(session);
- 
  		if (session->req && session->req->collided) {
  			DBG("Collision detected");
  			goto next;
--- 2214,2219 ----
***************
*** 2376,2382 ****
  
  	session->server = server;
  	bacpy(&session->dst, dst);
! 	session->ref = 1;
  	/* We don't use avdtp_set_state() here since this isn't a state change
  	 * but just setting of the initial state */
  	session->state = AVDTP_SESSION_STATE_DISCONNECTED;
--- 2360,2366 ----
  
  	session->server = server;
  	bacpy(&session->dst, dst);
! 	set_disconnect_timer(session);
  	/* We don't use avdtp_set_state() here since this isn't a state change
  	 * but just setting of the initial state */
  	session->state = AVDTP_SESSION_STATE_DISCONNECTED;
***************
*** 2482,2487 ****
--- 2466,2473 ----
  	struct avdtp *session = user_data;
  	GError *err = NULL;
  
+ 	avdtp_unref(session);
+ 
  	if (derr && dbus_error_is_set(derr)) {
  		error("Access denied: %s", derr->message);
  		connection_lost(session, EACCES);
***************
*** 2577,2586 ****
  							auth_cb, session);
  	if (perr < 0) {
  		avdtp_set_state(session, AVDTP_SESSION_STATE_DISCONNECTED);
- 		avdtp_unref(session);
  		goto drop;
  	}
  
  	dev->auto_connect = auto_connect;
  
  	return;
--- 2563,2574 ----
  							auth_cb, session);
  	if (perr < 0) {
  		avdtp_set_state(session, AVDTP_SESSION_STATE_DISCONNECTED);
  		goto drop;
  	}
  
+ 	/* Disable disconnect timer while authorizing */
+ 	avdtp_ref(session);
+ 
  	dev->auto_connect = auto_connect;
  
  	return;
***************
*** 3989,4011 ****
  void avdtp_exit(const bdaddr_t *src)
  {
  	struct avdtp_server *server;
- 	GSList *l;
  
  	server = find_server(servers, src);
  	if (!server)
  		return;
  
! 	l = server->sessions;
! 	while (l) {
! 		struct avdtp *session = l->data;
! 
! 		l = l->next;
! 		/* value of l pointer should be updated before invoking
! 		 * connection_lost since it internally uses avdtp_unref
! 		 * which operates on server->session list as well
! 		 */
! 		connection_lost(session, -ECONNABORTED);
! 	}
  
  	servers = g_slist_remove(servers, server);
  
--- 3977,3988 ----
  void avdtp_exit(const bdaddr_t *src)
  {
  	struct avdtp_server *server;
  
  	server = find_server(servers, src);
  	if (!server)
  		return;
  
! 	g_slist_free_full(server->sessions, avdtp_free);
  
  	servers = g_slist_remove(servers, server);
  
